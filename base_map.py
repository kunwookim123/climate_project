# base_map.py
import folium
import pandas as pd
import os
import re

class BaseMap:
    def __init__(self, data_path: str):
        """CSV나 리스트 데이터를 로드"""
        self.data_path = data_path  # 파일명에서 연도 추정용
        self.df = self.load_data(data_path)

    def load_data(self, data_path):
        """CSV 또는 리스트 형태 데이터 읽기 및 자동 구조 변환"""
        # ✅ 상대경로 → 절대경로 자동 변환
        if isinstance(data_path, str) and not os.path.isabs(data_path):
            base_dir = os.path.dirname(os.path.abspath(__file__))
            data_path = os.path.join(base_dir, data_path)

        if isinstance(data_path, str) and data_path.endswith(".csv"):
            df = pd.read_csv(data_path, encoding="utf-8-sig")
            df = self.auto_convert(df)
            return df

        elif isinstance(data_path, list):
            return pd.DataFrame(
                data_path,
                columns=["연도", "월", "일", "지역", "위도", "경도", "값"]
            )
        else:
            raise ValueError("지원하지 않는 데이터 형식입니다.")

    def auto_convert(self, df):
        """CSV 구조가 다를 때 자동 변환"""
        cols = df.columns

        # ✅ “일시” 컬럼이 있는 경우 → 연/월 분리
        if "일시" in cols:
            try:
                # “2021-07” 형식 처리
                if df["일시"].str.match(r"\d{4}-\d{2}").any():
                    df["연도"] = df["일시"].str.split("-").str[0].astype(int)
                    df["월"] = df["일시"].str.split("-").str[1].astype(int)
                else:
                    # “Jan-21” 형식 처리
                    df["월"] = df["일시"].str.split("-").str[0]
                    df["연도"] = "20" + df["일시"].str.split("-").str[1]
                    month_map = {
                        "Jan": 1, "Feb": 2, "Mar": 3, "Apr": 4, "May": 5, "Jun": 6,
                        "Jul": 7, "Aug": 8, "Sep": 9, "Oct": 10, "Nov": 11, "Dec": 12
                    }
                    df["월"] = df["월"].map(month_map)
                df["일"] = 1
            except Exception as e:
                print(f"⚠️ 일시 파싱 오류: {e}")
                df["연도"], df["월"], df["일"] = None, None, 1

        # ✅ “연도”가 없으면 파일명에서 추정
        if "연도" not in df.columns:
            match = re.search(r"(\d{4})", self.data_path)
            df["연도"] = int(match.group(1)) if match else None

        # ✅ “월” NaN 있으면 1월로 대체
        if "월" not in df.columns or df["월"].isna().any():
            df["월"] = df["월"].fillna(1) if "월" in df.columns else 1

        # ✅ 주요 값 컬럼 자동 탐색
        value_col = None
        for c in cols:
            if "평균지면온도" in c or "일사" in c or "강수" in c:
                value_col = c
                break
        if value_col:
            df.rename(columns={value_col: "값"}, inplace=True)

        # ✅ 지역명 컬럼 통일
        if "지점명" in cols:
            df.rename(columns={"지점명": "지역"}, inplace=True)
        elif "지점" in cols and "지역" not in cols:
            df.rename(columns={"지점": "지역"}, inplace=True)

        # 🔴 전국 관측소 위도·경도 자동 매핑 -----------------------------
        location_data = {
            "서울": [37.5665, 126.9780], "부산": [35.1796, 129.0756],
            "대구": [35.8714, 128.6014], "인천": [37.4563, 126.7052],
            "광주": [35.1595, 126.8526], "대전": [36.3504, 127.3845],
            "울산": [35.5384, 129.3114], "세종": [36.4801, 127.2892],
            "춘천": [37.8813, 127.7298], "강릉": [37.7519, 128.8761],
            "속초": [38.2070, 128.5910], "원주": [37.3422, 127.9202],
            "청주": [36.6424, 127.4890], "전주": [35.8242, 127.1480],
            "포항": [36.0190, 129.3430], "창원": [35.2280, 128.6810],
            "진주": [35.1800, 128.1080], "제주": [33.4996, 126.5312],
            "거제": [34.8806, 128.6217], "통영": [34.8553, 128.4330],
            "김해": [35.2280, 128.8890], "양산": [35.3342, 129.0370],
            "사천": [35.0031, 128.0640], "고성": [38.3786, 128.4675],
            "철원": [38.1460, 127.3139], "동해": [37.5073, 129.1245],
            "삼척": [37.4474, 129.1675], "태백": [37.1640, 128.9857],
            "평창": [37.3700, 128.3900], "홍천": [37.6900, 127.8800],
            "정선": [37.3800, 128.6600], "영월": [37.1830, 128.4670],
            "충주": [36.9714, 127.9250], "제천": [37.1325, 128.1900],
            "보은": [36.4890, 127.7310], "옥천": [36.3010, 127.5730],
            "상주": [36.4100, 128.1600], "안동": [36.5680, 128.7290],
            "구미": [36.1196, 128.3448], "영주": [36.8057, 128.6241],
            "영천": [35.9733, 128.9380], "문경": [36.5860, 128.1870],
            "김천": [36.1218, 128.1190], "예천": [36.6552, 128.4530],
            "밀양": [35.5039, 128.7467], "거창": [35.6866, 127.9090],
            "합천": [35.5665, 128.1650], "남해": [34.8371, 127.8924],
            "순천": [34.9507, 127.4870], "광양": [34.9406, 127.6955],
            "여수": [34.7604, 127.6622], "목포": [34.8118, 126.3922],
            "해남": [34.5730, 126.5980], "진도": [34.4854, 126.2646],
            "완도": [34.3210, 126.7470], "고흥": [34.6110, 127.2820],
            "보성": [34.7680, 127.0810], "나주": [35.0280, 126.7170],
            "함평": [35.0650, 126.5160], "영광": [35.2770, 126.5090],
            "장성": [35.3020, 126.7830], "담양": [35.3210, 126.9880],
            "순창": [35.3710, 127.1380], "남원": [35.4120, 127.3920],
            "임실": [35.6060, 127.2820], "무주": [35.9440, 127.6610],
            "정읍": [35.5660, 126.8550], "고창": [35.4350, 126.7010],
            "군산": [35.9670, 126.7360], "익산": [35.9410, 126.9570],
            "부여": [36.2760, 126.9100], "서산": [36.7840, 126.4500],
            "보령": [36.3490, 126.6020], "홍성": [36.6010, 126.6620],
            "예산": [36.6880, 126.8440], "천안": [36.8150, 127.1550],
            "아산": [36.7900, 127.0040], "공주": [36.4460, 127.1190],
            "논산": [36.1830, 127.0970], "계룡": [36.2740, 127.2480],
            "서천": [36.0780, 126.6930], "단양": [36.9850, 128.3650],
            "의정부": [37.7390, 127.0460], "양평": [37.4910, 127.4870],
            "이천": [37.2780, 127.4420], "용인": [37.2410, 127.1770],
            "평택": [36.9940, 127.0850], "수원": [37.2636, 127.0286],
            "성남": [37.4200, 127.1260], "의왕": [37.3440, 126.9680],
            "안양": [37.3890, 126.9250], "광명": [37.4780, 126.8640],
            "안산": [37.3160, 126.8310], "시흥": [37.3800, 126.8020],
            "고양": [37.6580, 126.8310], "파주": [37.7600, 126.7740],
            "김포": [37.6540, 126.6830], "남양주": [37.6360, 127.2160],
            "가평": [37.8310, 127.5120], "포천": [37.8940, 127.2000],
            "동두천": [37.9010, 127.0600]
        }

        # ✅ 위도/경도 컬럼 없을 경우 생성
        if "위도" not in df.columns:
            df["위도"] = None
        if "경도" not in df.columns:
            df["경도"] = None

        # ✅ 위도·경도 자동 매핑
        df["위도"] = df["지역"].map(lambda x: location_data.get(x, [None, None])[0])
        df["경도"] = df["지역"].map(lambda x: location_data.get(x, [None, None])[1])

        # ✅ 일자가 없으면 1일로 설정
        if "일" not in df.columns:
            df["일"] = 1

        # ✅ 누락된 컬럼 생성 후 정렬
        keep_cols = ["연도", "월", "일", "지역", "위도", "경도", "값"]
        for col in keep_cols:
            if col not in df.columns:
                df[col] = None

        # ✅ 좌표 없는 행 제거 (folium 오류 방지)
        if "위도" in df.columns and "경도" in df.columns:
            df = df.dropna(subset=["위도", "경도"])

        return df[keep_cols]

    def filter_data(self, year, month, day):
        """선택한 날짜로 데이터 필터링"""
        return self.df[
            (self.df["연도"].astype(int) == year)
            & (self.df["월"].astype(int) == month)
            & (self.df["일"].astype(int) == day)
        ]

    def create_map(self, lat=36.5, lon=127.8, zoom=7):
        """기본 지도 생성"""
        return folium.Map(location=[lat, lon], zoom_start=zoom)
